add correction factor for readings at certain levels 
make things such as carb ratio and isf permanent unless user instructs to change it 
incorporate values from the config file into the program
create a unit converted based on file
insulin settings menu 
update specified setting and loop till done
add option for type other where user just enters blood sugar
add option for correction where there is just a dosage
possibly add target blood glucose to configuration 
// add feature to view logs in a day week past month 
create a feature to go back
process target and blood glucose on seperate lines 
not printing total dosage during correction type
printing glucose and target on the same line when displaying
when using other feature it is printing an uncessary comma




create app that notifies people when you are going low or high using api and python
1. Unit Conversion Feature
Purpose: Allow users to switch between mmol/L (commonly used in Canada) and mg/dL (used in the USA).
Implementation:
Add an option in the menu for unit conversion.
Use conversion formulas:
To convert mmol/L to mg/dL: multiply by 18.
To convert mg/dL to mmol/L: divide by 18.
Store the preferred unit in a settings file or global variable.
2. Edit Existing Log Entries
Purpose: Allow users to correct or update previously logged entries.
Implementation:
Add an option to display all entries with an index number.
Let the user choose an entry to edit.
Provide a submenu to update specific fields (e.g., blood glucose level, carbs, etc.).
Save the updated entry back to the file.

4. Data Analysis and Reporting
Purpose: Provide users with insights into their data, such as trends or averages.
Features:
Calculate and display:
Average blood glucose levels over a specified period.
Total insulin used in a day, week, or month.
Most common entry type (e.g., meal, snack, correction).
Allow exporting reports to a CSV file for further analysis in tools like Excel.
5. Error Handling and Validation
Purpose: Ensure the program handles invalid inputs gracefully.
Implementation:
Validate user inputs (e.g., no negative glucose levels or carbs).
Handle missing files gracefully (e.g., create a new log file if it doesn't exist).
Provide helpful error messages for any issues.
6. Graphical Data Visualization (Optional)
Purpose: Display graphs or charts for a more user-friendly experience.
Implementation:
Use Python (via matplotlib) or another library for plotting.
Export log data as a CSV file and write a separate Python script to visualize:
Blood glucose trends.
Insulin usage over time.
Long-term Goal: Combine C for data handling and Python for visualization.
7. Automation of Calculations
Purpose: Automatically suggest corrections when blood glucose levels are too high or too low.
Implementation:
Create logic to flag "high" or "low" blood glucose readings.
Provide recommended insulin dosages or carbohydrate intake based on thresholds.
8. Meal and Insulin History
Purpose: Let users view and filter past entries by type (meal, snack, correction).
Implementation:
Add a filter option in the log view.
Display only entries of the selected type.
9. User Authentication (Optional)
Purpose: Allow multiple users to manage their own logs separately.
Implementation:
Add a login system using usernames and passwords.
Save user-specific data in separate directories or files.
10. Integrate with External APIs (Advanced)
Purpose: Fetch data from devices like the Freestyle Libre or other CGM (Continuous Glucose Monitoring) systems.
Implementation:
Research if the Freestyle Libre app provides a developer API for data access.
Write a Python or C module to fetch and integrate CGM readings into your logs.


